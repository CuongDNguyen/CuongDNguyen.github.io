{"version":3,"sources":["components/Projects.js","components/ProfileContent.js","components/Profiles.js","components/App.js","serviceWorker.js","index.js"],"names":["Projects","ProfileContent","Profiles","ListItemLink","props","ListItem","button","component","Fragment","List","ListItemIcon","href","ListItemText","primary","App","useState","currentTab","setCurrentTab","className","Tabs","value","Tab","label","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAUeA,EARE,WACb,OACI,+B,oGCKOC,EAPQ,WACnB,OACI,+BC+DOC,G,MAvDE,WAEb,SAASC,EAAaC,GAClB,OAAO,kBAACC,EAAA,EAAD,eAAUC,QAAM,EAACC,UAAU,KAAQH,IAG9C,OACI,kBAAC,IAAMI,SAAP,KACI,kBAACC,EAAA,EAAD,KACI,kBAACJ,EAAA,EAAD,KACI,kBAACK,EAAA,EAAD,KACI,kBAACP,EAAD,CAAcQ,KAAK,mCACf,kBAAC,IAAD,QAGR,kBAACR,EAAD,CAAcQ,KAAK,mCACf,kBAACC,EAAA,EAAD,CAAcC,QAAQ,aAG9B,kBAACR,EAAA,EAAD,KACI,kBAACK,EAAA,EAAD,KACI,kBAACP,EAAD,CAAcQ,KAAK,sDACf,kBAAC,IAAD,QAGR,kBAACR,EAAD,CAAcQ,KAAK,sDACf,kBAACC,EAAA,EAAD,CAAcC,QAAQ,eAG9B,kBAACR,EAAA,EAAD,KACI,kBAACK,EAAA,EAAD,KACI,kBAACP,EAAD,CAAcQ,KAAK,iCACf,kBAAC,IAAD,QAGR,kBAACR,EAAD,CAAcQ,KAAK,iCACf,kBAACC,EAAA,EAAD,CAAcC,QAAQ,WAG9B,kBAACR,EAAA,EAAD,KACI,kBAACK,EAAA,EAAD,KACI,kBAACP,EAAD,CAAcQ,KAAK,iCACf,kBAAC,IAAD,QAGR,kBAACR,EAAD,CAAcQ,KAAK,iCACf,kBAACC,EAAA,EAAD,CAAcC,QAAQ,cAIlC,kBAAC,EAAD,SCjCGC,EAvBH,WAAO,IAAD,EAEsBC,mBAAS,YAF/B,mBAEPC,EAFO,KAEKC,EAFL,KAYd,OACQ,yBAAKC,UAAU,mBACX,kBAACC,EAAA,EAAD,CAAMC,MAAsB,aAAfJ,EAA4B,WAAa,YAClD,kBAACK,EAAA,EAAD,CAAKH,UAAU,OAAOE,MAAM,WAAWE,MAAM,cAAcC,QAXjD,WACtBN,EAAc,eAWF,kBAACI,EAAA,EAAD,CAAKH,UAAU,OAAOE,MAAM,WAAWE,MAAM,WAAYC,QAR9C,WACvBN,EAAc,gBASU,aAAfD,EAA4B,kBAAC,EAAD,MAAe,kBAAC,EAAD,QCZxCQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bb4bd5ea.chunk.js","sourcesContent":["import React from 'react';\n\nconst Projects = () => {\n    return (\n        <div>\n            \n        </div>\n    );\n};\n\nexport default Projects;","import React from 'react';\n\nconst ProfileContent = () => {\n    return (\n        <div>\n        </div>\n    );\n};\n\nexport default ProfileContent;","import React from 'react';\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport {ListItemText} from \"@material-ui/core\";\nimport EmailIcon from '@material-ui/icons/Email';\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\nimport ProfileContent from \"./ProfileContent\";\nimport \"../styles/Profiles.css\";\n\nconst Profiles = () => {\n\n    function ListItemLink(props) {\n        return <ListItem button component=\"a\" {...props} />;\n    }\n\n    return (\n        <React.Fragment>\n            <List>\n                <ListItem>\n                    <ListItemIcon>\n                        <ListItemLink href=\"https://github.com/CuongDNguyen\">\n                            <GitHubIcon/>\n                        </ListItemLink>\n                    </ListItemIcon>\n                    <ListItemLink href=\"https://github.com/CuongDNguyen\">\n                        <ListItemText primary=\"Github\"/>\n                    </ListItemLink>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <ListItemLink href=\"https://www.linkedin.com/in/cuong-nguyen-20701134/\">\n                            <LinkedInIcon/>\n                        </ListItemLink>\n                    </ListItemIcon>\n                    <ListItemLink href=\"https://www.linkedin.com/in/cuong-nguyen-20701134/\">\n                        <ListItemText primary=\"LinkedIn\"/>\n                    </ListItemLink>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <ListItemLink href=\"mailto:cduynguyen95@gmail.com\">\n                            <EmailIcon/>\n                        </ListItemLink>\n                    </ListItemIcon>\n                    <ListItemLink href=\"mailto:cduynguyen95@gmail.com\">\n                        <ListItemText primary=\"Mail\"/>\n                    </ListItemLink>\n                </ListItem>\n                <ListItem>\n                    <ListItemIcon>\n                        <ListItemLink href=\"./Cuong_Nguyen_Resume_PDF.pdf\">\n                            <PictureAsPdfIcon/>\n                        </ListItemLink>\n                    </ListItemIcon>\n                    <ListItemLink href=\"./Cuong_Nguyen_Resume_PDF.pdf\">\n                        <ListItemText primary=\"Resume\"/>\n                    </ListItemLink>\n                </ListItem>\n            </List>\n            <ProfileContent/>\n        </React.Fragment>\n    );\n};\n\nexport default Profiles;","import React, {useState} from 'react';\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Projects from \"./Projects\";\nimport Profiles from \"./Profiles\";\n\nconst App = () => {\n\n    const [currentTab, setCurrentTab] = useState(\"profiles\");\n\n    const profileTabClicked = () => {\n        setCurrentTab(\"profiles\")\n    };\n\n    const projectsTabClicked = () => {\n        setCurrentTab(\"projects\")\n    };\n\n    return (\n            <div className=\"container-fluid\">\n                <Tabs value={currentTab === \"profiles\" ? \"profiles\" : \"projects\"}>\n                    <Tab className=\"tabs\" value=\"profiles\" label=\"My Profiles\" onClick={profileTabClicked} />\n                    <Tab className=\"tabs\" value=\"projects\" label=\"Projects\"  onClick={projectsTabClicked} />\n                </Tabs>\n                {currentTab === \"profiles\" ? <Profiles /> : <Projects />}\n            </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}