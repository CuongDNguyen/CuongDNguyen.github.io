{"version":3,"sources":["components/Projects.js","components/ProfileContent.js","components/Profiles.js","components/App.js","serviceWorker.js","index.js"],"names":["Projects","ProfileContent","Profiles","ListItemLink","props","ListItem","button","component","Fragment","List","ListItemIcon","href","ListItemText","primary","App","useState","currentTab","setCurrentTab","className","Tabs","value","Tab","label","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAUeA,EARE,WACb,OACI,+B,oGCKOC,EAPQ,WACnB,OACI,+BC+DOC,G,MAvDE,WAEb,SAASC,EAAaC,GAClB,OAAO,kBAACC,EAAA,EAAD,eAAUC,QAAM,EAACC,UAAU,KAAQH,IAG9C,OACI,kBAAC,IAAMI,SAAP,KACI,kBAACC,EAAA,EAAD,KACI,kBAACJ,EAAA,EAAD,KACI,kBAACK,EAAA,EAAD,KACI,kBAACP,EAAD,CAAcQ,KAAK,mCACf,kBAAC,IAAD,QAGR,kBAACR,EAAD,CAAcQ,KAAK,mCACf,kBAACC,EAAA,EAAD,CAAcC,QAAQ,aAG9B,kBAACR,EAAA,EAAD,KACI,kBAACK,EAAA,EAAD,KACI,kBAACP,EAAD,CAAcQ,KAAK,sDACf,kBAAC,IAAD,QAGR,kBAACR,EAAD,CAAcQ,KAAK,sDACf,kBAACC,EAAA,EAAD,CAAcC,QAAQ,eAG9B,kBAACR,EAAA,EAAD,KACI,kBAACK,EAAA,EAAD,KACI,kBAACP,EAAD,CAAcQ,KAAK,iCACf,kBAAC,IAAD,QAGR,kBAACR,EAAD,CAAcQ,KAAK,iCACf,kBAACC,EAAA,EAAD,CAAcC,QAAQ,WAG9B,kBAACR,EAAA,EAAD,KACI,kBAACK,EAAA,EAAD,KACI,kBAACP,EAAD,CAAcQ,KAAK,iCACf,kBAAC,IAAD,QAGR,kBAACR,EAAD,CAAcQ,KAAK,iCACf,kBAACC,EAAA,EAAD,CAAcC,QAAQ,cAIlC,kBAAC,EAAD,SCjCGC,EAvBH,WAAO,IAAD,EAEsBC,mBAAS,YAF/B,mBAEPC,EAFO,KAEKC,EAFL,KAYd,OACQ,yBAAKC,UAAU,mBACX,kBAACC,EAAA,EAAD,CAAMC,MAAsB,aAAfJ,EAA4B,WAAa,YAClD,kBAACK,EAAA,EAAD,CAAKH,UAAU,OAAOE,MAAM,WAAWE,MAAM,cAAcC,QAXjD,WACtBN,EAAc,eAWF,kBAACI,EAAA,EAAD,CAAKH,UAAU,OAAOE,MAAM,WAAWE,MAAM,WAAYC,QAR9C,WACvBN,EAAc,gBASU,cAAfD,EAA6B,kBAAC,EAAD,MAAe,kBAAC,EAAD,QCZzCQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5ea0c4a5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Projects = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Projects;","import React from 'react';\r\n\r\nconst ProfileContent = () => {\r\n    return (\r\n        <div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileContent;","import React from 'react';\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport {ListItemText} from \"@material-ui/core\";\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport \"../styles/Profiles.css\";\r\n\r\nconst Profiles = () => {\r\n\r\n    function ListItemLink(props) {\r\n        return <ListItem button component=\"a\" {...props} />;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <List>\r\n                <ListItem>\r\n                    <ListItemIcon>\r\n                        <ListItemLink href=\"https://github.com/CuongDNguyen\">\r\n                            <GitHubIcon/>\r\n                        </ListItemLink>\r\n                    </ListItemIcon>\r\n                    <ListItemLink href=\"https://github.com/CuongDNguyen\">\r\n                        <ListItemText primary=\"Github\"/>\r\n                    </ListItemLink>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemIcon>\r\n                        <ListItemLink href=\"https://www.linkedin.com/in/cuong-nguyen-20701134/\">\r\n                            <LinkedInIcon/>\r\n                        </ListItemLink>\r\n                    </ListItemIcon>\r\n                    <ListItemLink href=\"https://www.linkedin.com/in/cuong-nguyen-20701134/\">\r\n                        <ListItemText primary=\"LinkedIn\"/>\r\n                    </ListItemLink>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemIcon>\r\n                        <ListItemLink href=\"mailto:cduynguyen95@gmail.com\">\r\n                            <EmailIcon/>\r\n                        </ListItemLink>\r\n                    </ListItemIcon>\r\n                    <ListItemLink href=\"mailto:cduynguyen95@gmail.com\">\r\n                        <ListItemText primary=\"Mail\"/>\r\n                    </ListItemLink>\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemIcon>\r\n                        <ListItemLink href=\"./Cuong_Nguyen_Resume_PDF.pdf\">\r\n                            <PictureAsPdfIcon/>\r\n                        </ListItemLink>\r\n                    </ListItemIcon>\r\n                    <ListItemLink href=\"./Cuong_Nguyen_Resume_PDF.pdf\">\r\n                        <ListItemText primary=\"Resume\"/>\r\n                    </ListItemLink>\r\n                </ListItem>\r\n            </List>\r\n            <ProfileContent/>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Profiles;","import React, {useState} from 'react';\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Projects from \"./Projects\";\r\nimport Profiles from \"./Profiles\";\r\n\r\nconst App = () => {\r\n\r\n    const [currentTab, setCurrentTab] = useState(\"profiles\");\r\n\r\n    const profileTabClicked = () => {\r\n        setCurrentTab(\"profiles\")\r\n    };\r\n\r\n    const projectsTabClicked = () => {\r\n        setCurrentTab(\"projects\")\r\n    };\r\n\r\n    return (\r\n            <div className=\"container-fluid\">\r\n                <Tabs value={currentTab === \"profiles\" ? \"profiles\" : \"projects\"}>\r\n                    <Tab className=\"tabs\" value=\"profiles\" label=\"My Profiles\" onClick={profileTabClicked} />\r\n                    <Tab className=\"tabs\" value=\"projects\" label=\"Projects\"  onClick={projectsTabClicked} />\r\n                </Tabs>\r\n                {currentTab === \"profi les\" ? <Profiles /> : <Projects />}\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}